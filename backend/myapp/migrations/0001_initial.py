# Generated by Django 2.2.4 on 2019-10-25 19:50

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('birthday', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, default='U', max_length=1)),
                ('points', models.IntegerField(blank=True, default=0, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'usuario',
                'verbose_name_plural': 'usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'ciudad',
                'verbose_name_plural': 'ciudades',
            },
        ),
        migrations.CreateModel(
            name='Prize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=300, unique=True)),
                ('pointsRequired', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'premio',
                'verbose_name_plural': 'premios',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'rol',
                'verbose_name_plural': 'roles',
            },
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('score', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'ruta',
                'verbose_name_plural': 'rutas',
            },
        ),
        migrations.CreateModel(
            name='TouristPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('latituded', models.CharField(max_length=100)),
                ('longitude', models.CharField(max_length=100)),
                ('radio', models.IntegerField(default=100)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.City')),
            ],
            options={
                'verbose_name': 'punto turistico',
                'verbose_name_plural': 'puntos turisticos',
            },
        ),
        migrations.CreateModel(
            name='UserRoute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.BooleanField(default=True)),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Route')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'usuario y ruta',
                'verbose_name_plural': 'usuarios y rutas',
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.BooleanField(default=True)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'usuario y rol',
                'verbose_name_plural': 'usuarios y roles',
            },
        ),
        migrations.CreateModel(
            name='UserPrize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.BooleanField(default=True)),
                ('prize', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Prize')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'usuario y premio',
                'verbose_name_plural': 'usuarios y premios',
            },
        ),
        migrations.CreateModel(
            name='TouristPointRoute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.BooleanField(default=True)),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='myapp.Route')),
                ('touristPoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.TouristPoint')),
            ],
            options={
                'verbose_name': 'punto turistico y ruta',
                'verbose_name_plural': 'puntos turisticos y rutas',
            },
        ),
        migrations.AddField(
            model_name='route',
            name='touristPoints',
            field=models.ManyToManyField(through='myapp.TouristPointRoute', to='myapp.TouristPoint'),
        ),
        migrations.AddField(
            model_name='route',
            name='users',
            field=models.ManyToManyField(through='myapp.UserRoute', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='role',
            name='users',
            field=models.ManyToManyField(through='myapp.UserRole', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('latitude', models.CharField(max_length=100)),
                ('longitude', models.CharField(max_length=100)),
                ('radio', models.IntegerField(default=100)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='myapp.City')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'restaurante',
                'verbose_name_plural': 'restaurantes',
            },
        ),
        migrations.AddField(
            model_name='prize',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.Restaurant'),
        ),
        migrations.AddField(
            model_name='prize',
            name='users',
            field=models.ManyToManyField(through='myapp.UserPrize', to=settings.AUTH_USER_MODEL),
        ),
    ]
